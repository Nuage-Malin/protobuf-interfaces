syntax = "proto3";

package Maestro_Vault;

enum storage_type {
  NONE = 0;
  UPLOAD_QUEUE = 1;
  DOWNLOAD_QUEUE = 2; // todo replace by download stack
  // REMOVE_QUEUE = 3;
  // REQUEST_QUEUE = 4; // probz not ?
}

message FileMetaInfo {
  string fileId = 1;
  string userId = 2;
  string diskId = 3;
  // it's possible to have no store type, then the array is empty
  repeated storage_type store_types = 4;
  // todo creation date ? // not a priority at all
}

/**
 * File to upload
 */
message UploadFileRequest {
  // todo replace with FileMetaInfo
  string fileId = 1;
  string userId = 2;
  string diskId = 3;
  bytes content = 4;
  optional storage_type store_type = 5;
}

/**
 * Upload result
 */
message UploadFileStatus {}

/**
 * Files to upload
 */
message UploadFilesRequest {
  repeated UploadFileRequest files = 1;
}

/**
 * Upload result
 */
message UploadFilesStatus {
  repeated string fileIdFailures = 1;
}

/**
 * File to modify
 */
message ModifyFileRequest {
  string fileId = 1;
  bytes content = 2;
}

/**
 * Modify result
 */
message ModifyFileStatus {}

/**
 * Download one file
 */
message DownloadFileRequest {
  // todo replace with FileMetaInfo
  string fileId = 1;
  string userId = 2;
  string diskId = 3;
}

message DownloadFileStatus {
  bytes content = 1;
}

/**
 * Download multiple files
 */
message DownloadFilesRequest {
  repeated DownloadFileRequest files = 1;
}

message DownloadFilesElemStatus {
  string fileId = 1;
  bytes content = 2;
}

message DownloadFilesStatus {
  repeated DownloadFilesElemStatus files = 1;
}


message DownloadStorageTypeFilesRequest {
  storage_type store_type = 1;
}

/**
 * Files to remove
 */
message RemoveFileRequest {
  // todo replace with FileMetaInfo
  string fileId = 1;
  string userId = 2;
  string diskId = 3;
}

/**
 * Remove result
 */
message RemoveFileStatus {}

/**
 * Files to remove
 */
message RemoveFilesRequest {
  repeated string fileId = 1; // todo put s to fileId
  // string userId = 2; // todo remove cause useless
  // string diskId = 3; // todo remove cause useless
}

/**
 * Remove result
 */
message RemoveFilesStatus {
  repeated string fileIdFailures = 1;
}

message RemoveUserRequest {
  string userId = 1;
}

message RemoveUserStatus {}

/**
 * File to get meta info from
 */
message GetFileMetaInfoRequest {
  // if all three are null, return all
  string fileId = 1;
}

/**
 * Files to get meta info from
 */
message GetFilesMetaInfoRequest {
  // if all three are null, return all
  optional string userId = 1;
  optional string diskId = 2;
  optional storage_type store_type = 3; // ?
}

/**
 * Meta info
 */
message GetFileMetaInfoStatus {
  FileMetaInfo file = 1;
}
/**
 * Meta info
 */
message GetFilesMetaInfoStatus {
  repeated FileMetaInfo files = 1;
}

message GetFilesDisksRequest {
  repeated string file_ids = 1;
}

message GetFilesDisksStatus {
  repeated string disk_ids = 1;
}

/**
 * Procedures from Maestro to Vault
 */
service Maestro_Vault_Service {
  // Upload
  rpc uploadFile(UploadFileRequest) returns (UploadFileStatus); // Upload a file
  rpc uploadFiles(UploadFilesRequest) returns (UploadFilesStatus); // Upload multiple files
  rpc modifyFile(ModifyFileRequest) returns (ModifyFileStatus); // Modify existing file

  // Remove
  rpc removeFile(RemoveFileRequest) returns (RemoveFileStatus); // Remove multiple files
  rpc removeFiles(RemoveFilesRequest) returns (RemoveFilesStatus); // Remove multiple files

  rpc removeUser(RemoveUserRequest) returns (RemoveUserStatus); // Remove user related files and directories

  // Download
  /* todo download user files */
  /* todo download disk files */
  rpc downloadFile(DownloadFileRequest) returns (DownloadFileStatus); // Download a file
  rpc downloadFiles(DownloadFilesRequest) returns (DownloadFilesStatus); // Download multiple files
  rpc downloadStorageTypeFiles(DownloadStorageTypeFilesRequest) returns (DownloadFilesStatus); // todo test

  // MetaInfo
  // todo
  //  for vault-cache, add get metadata procedures :
  rpc getFileMetaInfo(GetFileMetaInfoRequest) returns (GetFileMetaInfoStatus); // get files meta-info by user, disk or file id
  rpc getFilesMetaInfo(GetFilesMetaInfoRequest) returns (GetFilesMetaInfoStatus); // get files meta-info by user, disk or file id
  rpc getFilesDisks(GetFilesDisksRequest) returns (GetFilesDisksStatus); // get files meta-info by user, disk or file id
  //

}
