syntax = "proto3";

package Maestro_Santaclaus;

import "common/File.proto";

option go_package = "./";

/**
 * File to upload to the index
 */
message AddFileRequest {
  File.FileApproxMetadata file = 1;
  uint64 fileSize = 2;
}

/**
 * Response with created file infos
 */
message AddFileStatus {
  string fileId = 1;
  string diskId = 2;
}

/**
 * File to remove from the index
 */
message RemoveFileRequest {
  string fileId = 1;
}

/**
 * File removed infos
 */
message RemoveFileStatus {}

/**
 * Files to remove from the index
 */
message RemoveFilesRequest {
  repeated string fileIds = 1;
}

/**
 * Files removed infos
 */
message RemoveFilesStatus {}

/**
 * File to move
 */
message MoveFileRequest {
  string fileId = 1;
  string newDirId = 2;
}

 message MoveFileStatus {}

 /**
  * file to rename and new file name
  */
message RenameFileRequest {
  string fileId = 1; // file to be renamed
  string newFileName = 2; // New name of file
}

message RenameFileStatus {}

/**
 * Directory to add to the index
 */
message AddDirectoryRequest {
  File.FileApproxMetadata directory = 1;
}

/**
 * Directory added infos
 */
message AddDirectoryStatus {
  string dirId = 1;
}

/**
 * Directory to remove from the index
 */
message RemoveDirectoryRequest {
  string dirId = 1;
}

/**
 * Directory removed infos
 */
message RemoveDirectoryStatus {
  repeated string fileIdsToRemove = 1; // todo is it actually fileIdsRemoved ?
}

/**
 * Directory to move
 */
message MoveDirectoryRequest {
  string dirId = 1; // Dir to be moved
  string newDirId = 2; // DirId to store this dir in (aka new parent dir)
}

message MoveDirectoryStatus {}

/**
 * Directory to move
 */
message RenameDirectoryRequest {
  string dirId = 1; // Dir to be renamed
  string newDirName = 2; // New Name
}

message RenameDirectoryStatus {}

/**
 * File to get
 */
message GetFileRequest {
  string fileId = 1;
}

/**
 * File infos
 */
message GetFileStatus {
  File.FileMetadata file = 1;
  string diskId = 2;
  // todo time before availability ?
}

/**
 * Directory to get
 */
message GetDirectoryRequest {
  optional string dirId = 1; // If not set, get root directory
  string userId = 2;
  bool isRecursive = 3;
}

/**
 * Directory infos
 */
message GetDirectoryStatus {
  File.FilesIndex subFiles = 1;

  // todo replace by FileMetadata in order to have the ID
  // todo rename by recursive_dirs_files something to have files and directories into that
    //      or maybe have 2 different variables for files and directories
    // maybe ask Nell what he prefers
}

/**
 * Uploaded file result
 */
message UpdateFileSuccessRequest {
  string fileId = 1;
  uint64 newFileSize = 2;
}

/**
 * Update file success status
 */
message UpdateFileSuccessStatus {}

/**
 * File to move to another disk
 */
message ChangeFileDiskRequest {
  string fileId = 1;
}

/**
 * New file disk
 */
message ChangeFileDiskStatus {
  string diskId = 1;
}

message RemoveUserRequest {
  string userId = 1;
}

/**
 * Procedures from Maestro to Santaclaus
 */
service Maestro_Santaclaus_Service {
  // Files
  rpc addFile(AddFileRequest) returns (AddFileStatus); // Add a file to the index
  rpc virtualRemoveFile(RemoveFileRequest) returns (RemoveFileStatus); // Mark file as removed
  rpc virtualRemoveFiles(RemoveFilesRequest) returns (RemoveFilesStatus); // Mark files as removed
  rpc physicalRemoveFile(RemoveFileRequest) returns (RemoveFileStatus); // Remove file
  rpc physicalRemoveFiles(RemoveFilesRequest) returns (RemoveFilesStatus); // Remove files
  rpc moveFile(MoveFileRequest) returns (MoveFileStatus); // Chnage location (directory) of a file
  rpc renameFile(RenameFileRequest) returns (RenameFileStatus); // Chnage name of a file
  rpc getFile(GetFileRequest) returns (GetFileStatus); // Get file infos
  rpc updateFileSuccess(UpdateFileSuccessRequest) returns (UpdateFileSuccessStatus); // Upload file to disk successfully
  rpc changeFileDisk(ChangeFileDiskRequest) returns (ChangeFileDiskStatus); // Change file disk

  // Directories
  rpc addDirectory(AddDirectoryRequest) returns (AddDirectoryStatus); // Add a directory to the index
  rpc removeDirectory(RemoveDirectoryRequest) returns (RemoveDirectoryStatus); // Remove directory and all subdirectories and returns list of files to delete
  rpc moveDirectory(MoveDirectoryRequest) returns (MoveDirectoryStatus); // Chamge location (parent directory) of a direcory
  rpc renameDirectory(RenameDirectoryRequest) returns (RenameDirectoryStatus); // Change name of a directory
  rpc getDirectory(GetDirectoryRequest) returns (GetDirectoryStatus); // Get directory infos, if dirId is null, start from root directory

  // Users
  rpc removeUser(RemoveUserRequest) returns (RemoveDirectoryStatus); // Remove all user directories and return files to be deleted
}

// todo Implement all those procedures in one class, helper procedures in other classes

// [x] addFile
// [x] virtualRemoveFile
// [x] physicalRemoveFile
// [] moveFile
// [] renameFile
// [x] getFile
// [x] updateFileSuccess
// [] changeFileDisk
// [x] addDirectory
// [x] removeDirectory
// [] moveDirectory
// [] renameDirectory
// [x] getDirectory