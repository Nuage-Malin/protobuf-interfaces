syntax = "proto3";

package Maestro_Santaclaus;

import "common/File.proto";

option go_package = "./";

/**
 * File to upload to the index
 */
message AddFileRequest {
  File.FileApproxMetadata file = 1;
  uint64 fileSize = 2;
}

/**
 * Response with created file infos
 */
message AddFileStatus {
  string fileId = 1;
  string diskId = 2;
}

/**
 * File to remove from the index
 */
message RemoveFileRequest {
  string fileId = 1;
}

/**
 * File removed infos
 */
message RemoveFileStatus {}

/**
 * Files to remove from the index
 */
message RemoveFilesRequest {
  repeated string fileIds = 1;
}

/**
 * Files removed infos
 */
message RemoveFilesStatus {}

/**
 * File to move
 */
message MoveFileRequest {
  string fileId = 1;
  optional string newFileName = 3;
  optional string dirId = 2;
}

/**
 * File moved infos
 */
message MoveFileStatus {}

/**
 * Directory to add to the index
 */
message AddDirectoryRequest {
  File.FileApproxMetadata directory = 1;
  // todo add directory id of parent instead of path
}

/**
 * Directory added infos
 */
message AddDirectoryStatus {
  string dirId = 1;
}

/**
 * Directory to remove from the index
 */
message RemoveDirectoryRequest {
  string dirId = 1;
}

/**
 * Directory removed infos
 */
message RemoveDirectoryStatus {
  repeated string fileIdsToRemove = 1;
}

/**
 * Directory to move
 */
message MoveDirectoryRequest {
  string dirId = 1; // Dir to be moved
  optional string name = 2; // If specified : New Name
  optional string newLocationDirId = 3; // If specified : DirId to store this dir in (aka new parent dir)
}

/**
 * Directory moved infos
 */
message MoveDirectoryStatus {}

/**
 * File to get
 */
message GetFileRequest {
  string fileId = 1;
}

/**
 * File infos
 */
message GetFileStatus {
  File.FileMetadata file = 1;
  string diskId = 2;
  // todo time before availability ?
}

/**
 * Directory to get
 */
message GetDirectoryRequest {
  optional string dirId = 1; // If not set, get root directory
  string userId = 2;
  bool isRecursive = 3;
}

/**
 * Directory infos
 */
message GetDirectoryStatus {
  File.FilesIndex subFiles = 1;

  // todo replace by FileMetadata in order to have the ID
  // todo rename by recursive_dirs_files something to have files and directories into that
    //      or maybe have 2 different variables for files and directories
    // maybe ask Nell what he prefers
}

/**
 * Uploaded file result
 */
message UpdateFileSuccessRequest {
  string fileId = 1;
  uint64 newFileSize = 2;
}

/**
 * Update file success status
 */
message UpdateFileSuccessStatus {}

/**
 * File to move to another disk
 */
message ChangeFileDiskRequest {
  string fileId = 1;
}

/**
 * New file disk
 */
message ChangeFileDiskStatus {
  string diskId = 1;
}

/**
 * Procedures from Maestro to Santaclaus
 */
service Maestro_Santaclaus_Service {
  // Files
  rpc addFile(AddFileRequest) returns (AddFileStatus); // Add a file to the index
  rpc virtualRemoveFile(RemoveFileRequest) returns (RemoveFileStatus); // Remove file virtualy from the DB (not on disks)
  rpc virtualRemoveFiles(RemoveFilesRequest) returns (RemoveFilesStatus); // Remove files virtualy from the DB (not on disks)
  rpc physicalRemoveFile(RemoveFileRequest) returns (RemoveFileStatus); // Remove file physically from the file system
  rpc physicalRemoveFiles(RemoveFilesRequest) returns (RemoveFilesStatus); // Remove file physically from the file system
  rpc moveFile(MoveFileRequest) returns (MoveFileStatus); // Move filepath
  rpc getFile(GetFileRequest) returns (GetFileStatus); // Get file infos
  // todo set file downloadable
  rpc updateFileSuccess(UpdateFileSuccessRequest) returns (UpdateFileSuccessStatus); // Upload file to disk successfully
  // todo update file available or not ?
  rpc changeFileDisk(ChangeFileDiskRequest) returns (ChangeFileDiskStatus); // Change file disk

  // Directories
  rpc addDirectory(AddDirectoryRequest) returns (AddDirectoryStatus); // Add a directory to the index
  rpc removeDirectory(RemoveDirectoryRequest) returns (RemoveDirectoryStatus); // Remove a directory from the index
  rpc moveDirectory(MoveDirectoryRequest) returns (MoveDirectoryStatus); // Move a directory path
  rpc getDirectory(GetDirectoryRequest) returns (GetDirectoryStatus); // Get directory infos
}

// [x] addFile
// [x] virtualRemoveFile
// [x] physicalRemoveFile
// [x] moveFile
// [x] getFile
// [x] updateFileSuccess
// [] changeFileDisk
// [x] addDirectory
// [x] removeDirectory
// [x] moveDirectory
// [x] getDirectory