syntax = "proto3";

package UsersBack_Maestro;

import "google/protobuf/duration.proto";

import "common/File.proto";

/**
 * File to be uploaded to the server
 */
message FileUploadRequest {
  File.NewFile file = 1;
}

/**
 * Response from the server after uploading a file, status is known through return value
 */
message FileUploadStatus {
  string fileId = 1;
}

/**
 * File id corresponding to the file to be made available for download
 */
message AskFileDownloadRequest {
  string fileId = 1;
}

/**
 * Time until which the file will be made available for download
 */
message AskFileDownloadStatus {
  google.protobuf.Duration waitingTime = 1;
}

/**
 * File id corresponding to the file to be downloaded
 */
message FileDownloadRequest {
  string fileId = 1;
}

/**
 * Information indicating what list of file should be provided
 */
message GetFilesIndexRequest {
  string dirPath = 1; // Absolute path to the directory containing files
  string userId = 2; // User id of the user requesting files
}

/**
 * File to be removed
 */
message FileRemoveRequest {
  string fileId = 1;
}

message FileRemoveStatus {}

/**
 * File to be moved to another directory
 */
message FileMoveRequest {
  string fileId = 1;
  optional string dirPath = 2;
  optional string newFileName = 3;
}

message FileMoveStatus {}

message DirMakeRequest {
  string dirPath = 1;
}

message DirMakeStatus {}

message DirRemoveRequest {
  string dirPath = 1;
}

message DirRemoveStatus {}

message DirMoveRequest {
  string dirPath = 1;
  string newDirPath = 2;
}

message DirMoveStatus {}

/**
 * Procedures from UsersBack to Maestro
 */
service UsersBack_Maestro_Service {
  // Files
  rpc fileUpload(FileUploadRequest) returns (FileUploadStatus); // Upload a file
  rpc askFileDownload(AskFileDownloadRequest) returns (AskFileDownloadStatus); // Ask to download a file
  rpc fileDownload(FileDownloadRequest) returns (File.File); // Download a file if already asked
  rpc fileRemove(FileRemoveRequest) returns (FileRemoveStatus); // Delete an existing file
  rpc fileMove(FileMoveRequest) returns (FileMoveStatus); // Change directory or name of an existing file

  // Directories
  rpc dirMake(DirMakeRequest) returns (DirMakeStatus); // Create directory
  rpc dirRemove(DirRemoveRequest) returns (DirRemoveStatus); // Delete directory
  rpc dirMove(DirMoveRequest) returns (DirMoveStatus); // Change position (or name) of an existing directory

  rpc getFilesIndex(GetFilesIndexRequest) returns (File.FilesIndex); // Get file list (ls)
}