syntax = "proto3";

package UsersBack_Maestro;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "common/File.proto";
import "common/Disk.proto";

/**
 * File to be uploaded to the server
 */
message FileUploadRequest {
  File.NewFile file = 1;
}

/**
 * Response from the server after uploading a file, status is known through return value
 */
message FileUploadStatus {
  string fileId = 1;
}

/**
 * File id corresponding to the file to be made available for download
 */
message AskFileDownloadRequest {
  string fileId = 1;
}

/**
 * Time until which the file will be made available for download
 */
message AskFileDownloadStatus {
  google.protobuf.Duration waitingTime = 1;
}

/**
 * Id of the file to be canceled
 */
message CancelFileDownloadRequest {
  string fileId = 1;
}
message CancelFileDownloadStatus {}

/**
 * File id corresponding to the file to be downloaded
 */
message FileDownloadRequest {
  string fileId = 1;
}

/**
 * Information indicating what list of file should be provided
 */
message GetFilesIndexRequest {
  optional string dirId = 1; // If not set, get root directory
  string userId = 2;
  bool isRecursive = 3;
}
message GetFilesIndexStatus {
  File.FilesIndex subFiles = 1;
}

/**
 * File to be removed
 */
message FileRemoveRequest {
  string fileId = 1;
}

message FileRemoveStatus {}

/**
 * File to be removed
 */
message FilesRemoveRequest {
  repeated string fileId = 1;
}

message FilesRemoveStatus {
  repeated string fileIdFailures = 1;
}

/**
 * File to move
 */
message MoveFileRequest {
  string fileId = 1;
  string newDirId = 2;
}

message MoveFileStatus {}

 /**
  * file to rename and new file name
  */
message RenameFileRequest {
  string fileId = 1; // file to be renamed
  string newFileName = 2; // New name of file
}

message RenameFileStatus {}

message DirMakeRequest {
  File.FileApproxMetadata directory = 1;
}

message DirMakeStatus {
  string dirId = 1;
}

message DirRemoveRequest {
  string dirId = 1;
}

message DirRemoveStatus {}

/**
 * Directory to move
 */
message MoveDirectoryRequest {
  string dirId = 1; // Dir to be moved
  string newDirId = 2; // DirId to store this dir in (aka new parent dir)
}

message MoveDirectoryStatus {}

/**
 * Directory to move
 */
message RenameDirectoryRequest {
  string dirId = 1; // Dir to be renamed
  string newDirName = 2; // New Name
}

message RenameDirectoryStatus {}

/* Users consumption on a period
*/
message GetUserConsumptionRequest {
  string userId = 1;
  optional google.protobuf.Timestamp startDate = 2; // Start date of the period
  optional google.protobuf.Timestamp endDate = 3; // End date of the period (default as now)
}

message GetUserConsumptionStatus {
  uint64 consumption = 1;
}

message GetUserDiskSpaceRequest {
  string userId = 1;
  optional google.protobuf.Timestamp date = 2; // Date can be now or an older one (default as now)
}

message GetUserDiskSpaceStatus {
  uint64 totalDiskSpace = 1;
  uint64 usedDiskSpace = 2;
}

message GetDisksStatusRequest {}
message GetDisksStatusStatus {
  repeated Disk.DiskStatus disks = 1;
}

message RemoveUserRequest {
  string userId = 1;
}
message RemoveUserStatus {}

/**
 * Procedures from UsersBack to Maestro
 */
service UsersBack_Maestro_Service {
  // Files
  rpc fileUpload(FileUploadRequest) returns (FileUploadStatus); // Upload a file
  rpc askFileDownload(AskFileDownloadRequest) returns (AskFileDownloadStatus); // Ask to download a file
  rpc cancelFileDownload(CancelFileDownloadRequest) returns (CancelFileDownloadStatus); // Cancel a file download (success even if file was not asked)
  rpc fileDownload(FileDownloadRequest) returns (File.File); // Download a file if already asked
  rpc fileRemove(FileRemoveRequest) returns (FileRemoveStatus); // Delete an existing file
  rpc filesRemove(FilesRemoveRequest) returns (FilesRemoveStatus); // Delete an existing file
  rpc moveFile(MoveFileRequest) returns (MoveFileStatus); // Change directory of an existing file
  rpc renameFile(RenameFileRequest) returns (RenameFileStatus); // Change name of an existing file

  // Directories
  rpc dirMake(DirMakeRequest) returns (DirMakeStatus); // Create directory
  rpc dirRemove(DirRemoveRequest) returns (DirRemoveStatus); // Delete directory
  rpc moveDir(MoveDirectoryRequest) returns (MoveDirectoryStatus); // Change position of an existing directory
  rpc renameDir(RenameDirectoryRequest) returns (RenameDirectoryStatus); // Change name of an existing directory

  rpc getFilesIndex(GetFilesIndexRequest) returns (GetFilesIndexStatus); // Get file list (ls)
  rpc getUserConsumption(GetUserConsumptionRequest) returns (GetUserConsumptionStatus); // Get users consumption on period
  rpc getUserDiskSpace(GetUserDiskSpaceRequest) returns (GetUserDiskSpaceStatus);
  rpc getDisksStatus(GetDisksStatusRequest) returns (GetDisksStatusStatus); // List disks with there status

  rpc removeUser(RemoveUserRequest) returns (RemoveUserStatus); // Remove a user
}