syntax = "proto3";

package UsersBack_Maestro;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "common/File.proto";

/**
 * File to be uploaded to the server
 */
message FileUploadRequest {
  File.Newile file = 1;
}

/**
 * Response from the server after uploading a file, status is known through return value
 */
message FileUploadStatus {
  string fileId = 1;
}

/**
 * File id corresponding to the file to be made available for download
 */
message AskFileDownloadRequest {
  string fileId = 1;
}

/**
 * Time until which the file will be made available for download
 */
message AskFileDownloadStatus {
  google.protobuf.Duration waitingTime = 1;
}

/**
 * File id corresponding to the file to be downloaded
 */
message FileDownloadRequest {
  string fileId = 1;
}

/**
 * Information indicating what list of file should be provided
 */
message GetFilesIndexRequest {
  string dirPath = 1; // Absolute path to the directory containing files
  string userId = 2; // User id of the user requesting files
}

/**
 * Users consumption on a period
 */
message GetUserConsumptionRequest {
  string userId = 1;
  google.protobuf.Timestamp startDate = 2; // Start date of the period
  google.protobuf.Timestamp endDate = 3; // End date of the period
}

message GetUserConsumptionStatus {
  uint64 consumption = 1;
}

message GetUserDiskSpaceRequest {
  string userId = 1;
  google.protobuf.Timestamp date = 2; // Date can be now or an older one
}

message GetUserDiskSpaceStatus {
  uint64 totalDiskSpace = 1;
  uint64 usedDiskSpace = 2;
}

/**
 * Procedures from UsersBack to Maestro
 */
service UsersBack_Maestro_Service {
  rpc fileUpload(FileUploadRequest) returns (FileUploadStatus); // Upload a file
  rpc askFileDownload(AskFileDownloadRequest) returns (AskFileDownloadStatus); // Ask to download a file
  rpc fileDownload(FileDownloadRequest) returns (File.File); // Download a file if already asked
  rpc getFilesIndex(GetFilesIndexRequest) returns (File.FilesIndex); // Get file list (ls)
  rpc getUserConsumption(GetUserConsumptionRequest) returns (GetUserConsumptionStatus); // Get users consumption on period
  rpc getUserDiskSpace(GetUserDiskSpaceRequest) returns (GetUserDiskSpaceStatus);
}